/*
-----------------------------------------------------------------------------
Filename:    Tower.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "Tower.h"
#include <math.h>
#include <conio.h>
#define PI 3.14159265

//-------------------------------------------------------------------------------------
Tower::Tower(void)
{
}
//-------------------------------------------------------------------------------------
Tower::~Tower(void)
{
}

//-------------------------------------------------------------------------------------
void Tower::createScene(void)
{
	int radius;
	int height;
	int position;
	Ogre::Entity* entity [8];

	//Creates the static geometry to add geometry to
	Ogre::StaticGeometry *sg = mSceneMgr->createStaticGeometry("Tower");
		
	int randSeg [50][7][84];

	//Loop through 3D array, filling with random 0's and 1's
	for (height = 0; height < 50; ++height)
	{
		for (radius = 0; radius < 7; ++radius)
		{
			for (position = 0; position < 84; ++position)
			{
				//Worth looking at different seeds for this
				int x = rand() % 50;  

				//Makes the tower more sparse at the top - Larger the height, less likely the blocks
				if (x < (height - 2)) x = 0;
				else x = 1;

				//Makes the tower taper at the top - Bigger radiuses at top are cut off
				if ((floor((double)(50-height)/radius)) <= radius) x = 0;

				randSeg [height][radius][position] = x;
			}
		}
	}

	//Loop through the radius values first
	for (radius = 1; radius < 7; radius++)
	{
		//nseg is the number of blocks in that radius value
		int nseg = radius*12;

		//Convert stuff to string to use in file name
		Ogre::String meshnum = Ogre::StringConverter::toString(radius);
		Ogre::String r = Ogre::StringConverter::toString(radius);
		entity[radius] = mSceneMgr->createEntity("Head" + r, meshnum + ".mesh");

		//Loop through the height
		for (height = 0; height < 50; height++)
		{
			for (position = 0; position < nseg; position++)
			{
				//Generates random segments
				if (randSeg [height][radius][position] == 1)
				{
					//rads is the radian value for each block around the centre point
					double rads = ((1/nseg)+((double)position/(nseg/2)))*PI;
					//degs is the degree for how much the block is rotated
					double degs = 360/(double)nseg;
					//Postion k is the height, the others are the postion relative to the middle of the tower
					Ogre::Vector3 pos(Ogre::Vector3((radius+0.5)*cos(rads), (double)height/2, (radius+0.5)*sin(rads)));
					//How much the block is rotated depending on its position
					Ogre::Quaternion rot(Ogre::Degree(-(degs/2)-(position*degs)), Ogre::Vector3::UNIT_Y);
					//Scale is 1
					Ogre::Vector3 scale(1, 1, 1);
					//Add the entity to the static geometry
					sg->addEntity(entity[radius], pos, rot, scale);
				}
			}
		}
	}
	//Display the static geometry
	sg->build();

	// Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* l = mSceneMgr->createLight("MainLight");
    l->setPosition(20,80,50);
}



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        Tower app;
		AllocConsole();
        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }
		FreeConsole();
        return 0;
    }

#ifdef __cplusplus
}
#endif
